apply plugin: 'com.android.application'
android {
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/armeabi/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/mips/libc++_shared.so'
        pickFirst 'lib/mips64/libc++_shared.so'
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "1g"
        preDexLibraries true
    }

    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    flavorDimensions "target", "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "org.videolan.vlc"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "build_vlc_revision", vlcRevision()

        minSdkVersion 9
        targetSdkVersion 26
        versionCode 2011710
        versionName '2.1.17'

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
            }
        }

        /*signingConfigs {
            release {
                *//*
                To set this properties, create file gradle.properties with these 3 props.
                e.g.
                keyStoreFile=/home/<username>/.android/debug.keystore
                storealias=androiddebugkey
                storepwd=android
                 *//*
                storeFile file(keyStoreFile)
                keyAlias storealias
                if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                    storePassword = System.getenv('PASSWORD_KEYSTORE')
                    keyPassword = System.getenv('PASSWORD_KEYSTORE')
                } else {
                    storePassword storepwd
                    keyPassword storepwd
                }
            }
        }*/

        buildTypes {
            release {
                signingConfig null
                minifyEnabled true
                shrinkResources false
                proguardFile 'proguard.cfg'
            }
//            signedRelease {
//                initWith release
//                signingConfig = signingConfigs.release
//            }
            debug {
                applicationIdSuffix ".debug"
                jniDebuggable true
            }
        }

        productFlavors {
            vanilla {
                dimension "target"
                versionCode = 1
            }
            chrome {
                minSdkVersion 19
                dimension "target"
                versionCode = 2
            }
            ARMv7 {
                dimension "abi"
                versionCode = 4
            }
            x86 {
                dimension "abi"
                versionCode = 5
            }
            MIPS {
                dimension "abi"
                versionCode = 6
            }
            ARMv8 {
                dimension "abi"
                versionCode = 7
            }
            x86_64 {
                dimension "abi"
                versionCode = 8
            }
            MIPS64 {
                dimension "abi"
                versionCode = 9
            }
        }

        // make per-variant version code
        applicationVariants.all { variant ->
            // set the composite code
            variant.mergedFlavor.versionCode = variant.productFlavors.get(0).versionCode * 10000000 + defaultConfig.versionCode + variant.productFlavors.get(1).versionCode

            //Custom APK name
            variant.outputs.each { output ->
                def outputName = "VLC-Android-"
                if (variant.productFlavors.get(0).name != "vanilla")
                    outputName += variant.productFlavors.get(0).name.toUpperCase() + "-"
                outputName += variant.versionName + "-" + variant.productFlavors.get(1).name + ".apk"
                output.outputFile = new File(output.outputFile.parentFile, outputName);
            }
        }

        sourceSets.main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        sourceSets.release {
            manifest.srcFile 'flavors/release/AndroidManifest.xml'
        }
        sourceSets.debug {
            res.srcDirs = ['flavors/debug/res']
        }
        sourceSets.test {
            java.srcDirs = ['test']
        }
        sourceSets.chrome {
            manifest.srcFile 'flavors/chrome/AndroidManifest.xml'
            res.srcDirs = ['flavors/chrome/res']
        }
    }
}
task generateSources(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//---1、---
repositories{
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support:support-annotations:25.2.0'
    compile 'com.android.support:preference-v7:25.2.0'
    compile 'com.android.support:leanback-v17:25.2.0'
    compile 'com.android.support:preference-leanback-v17:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.1.0-beta1'
    testCompile 'junit:junit:4.12'
    //---2、---
    compile(name: 'libvlc-3.0.0', ext: 'aar')
    compile(name: 'api', ext: 'aar')
    compile(name: 'medialibrary', ext: 'aar')
    compile files('libs/axmlrpc.jar')

}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def revision() {
    def code = 'f146027'
//    exec {
//        commandLine 'git', 'rev-parse', '--short', 'HEAD'
//        standardOutput = code
//    }
    return code.toString()
}

def vlcRevision() {
    def vlc = '85f0e45'
//    exec {
//        commandLine 'git', 'rev-parse', '--short', 'HEAD'
//        workingDir '../vlc'
//        standardOutput = vlc
//    }
    return vlc.toString()
}